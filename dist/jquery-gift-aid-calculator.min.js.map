{"version":3,"sources":["jquery-gift-aid-calculator.js"],"names":["$","outputAmount","pence","parseInt","toFixed","parseTaxRate","taxRate","NaN","calculateGiftAid","initialGift","charityClaimTaxRate","charityClaimAmount","netGiftGiven","netGiftReceived","_basicRate","giverClaimAmount","grossGift","charityClaims","giverClaims","updateGiftAidCalculator","$calc","$giftInput","$taxRateInput","outputs","gift","hasClass","find","val","addClass","removeClass","each","field","$elements","text","updateGiftAidDelegate","cancelGiftAidFormSubmission","e","preventDefault","$calculators","length","this","submit","on","change","jQuery"],"mappings":";;;;;;;CAOA,SAA4BA,GAC1B,YASA,SAASC,GAAaC,GAEpB,MADAA,GAAQC,SAASD,EAAO,KAAO,GACtBA,EAAQ,KAAKE,QAAQ,GAShC,QAASC,GAAaC,GAoBpB,MAhBK,gBAAoBA,IAAa,EAAIA,GAAa,EAAIA,IACzDA,EAAoB,IAAVA,GAUZA,EAAUH,SAASG,EAAS,IACvBA,GAAWA,GAAaA,EAAU,MACrCA,EAAUC,KAGLD,EAUT,QAASE,GAAiBC,EAAaH,GAKrC,GAGII,GACAC,EACAC,EACAC,EANAC,EAAa,GAObC,EAAmB,CAiCvB,OA9BAT,GAAUD,EAAaC,IAAYQ,EAOnCJ,EAAuBJ,EAAUQ,EAAcR,EAAUQ,EAMzDL,EAAcN,SAAwB,IAAdM,EAAoB,KAAO,EAGnDE,EAAqBF,EAAcC,GAAuB,IAAMA,GAChEG,EAAkBJ,EAAcE,EAO5BD,EAAsBJ,IACxBS,EAAoBF,EAAkBP,EAAU,IAAOK,GAEzDC,EAAeH,EAAcM,GAK3BC,UAAiBf,EAAaQ,GAC9BH,QAAiBA,EAEjBW,cAAiBhB,EAAaU,GAC9BO,YAAiBjB,EAAac,GAC9BH,aAAiBX,EAAaW,GAC9BC,gBAAiBZ,EAAaY,IASlC,QAASM,GAAwBC,GAE/B,GAAIC,GACAC,EACAC,EACAC,CAGJJ,GAAQpB,EAAEoB,GAGLA,EAAMK,SAAS,2BAQpBJ,EAAaD,EAAMM,KAAK,kBACxBJ,EAAgBF,EAAMM,KAAK,qBACtBL,EAAiB,QAAMC,EAAoB,SAE9CE,EAAOhB,EAAiBa,EAAWM,MAAOL,EAAcK,OAoBtD,SAAWH,EAAKN,YAClBE,EAAMQ,SAAS,qBAEfR,EAAMS,YAAY,qBAepBN,GACEP,UAAiBI,EAAMM,KAAK,yBAC5BpB,QAAiBc,EAAMM,KAAK,sBAC5BT,cAAiBG,EAAMM,KAAK,6BAC5BR,YAAiBE,EAAMM,KAAK,2BAC5Bd,aAAiBQ,EAAMM,KAAK,6BAC5Bb,gBAAiBO,EAAMM,KAAK,iCAI9B1B,EAAE8B,KAAKP,EAAS,SAAUQ,EAAOC,GAK/BA,EAAUC,KAAKT,EAAKO,QAYxB,QAASG,GAAsBd,GAC7B,MAAO,YACLD,EAAwBC,IAU5B,QAASe,GAA4BC,GACnCA,EAAEC,iBAOJrC,EAAE,WACA,GAAIsC,GAAetC,EAAE,yBAGrB,SAAKsC,EAAaC,SAQlBD,EACGV,SAAS,MACTC,YAAY,aAMfS,GAAaR,KAAK,WAChB,GAAIT,GACAC,EACAF,EAAQpB,EAAEwC,KAGdrB,GAAwBC,GAGxBA,EAAMqB,OAAON,GAWbd,EAAarB,EAAE,kBACfsB,EAAgBtB,EAAE,qBACdqB,EAAWkB,QAAUjB,EAAciB,SACrClB,EAAWqB,GAAG,gBAAiBR,EAAsBd,IACrDE,EAAcqB,OAAOT,EAAsBd,WAOhDwB","file":"jquery-gift-aid-calculator.min.js","sourcesContent":["/**\n * All JavaScript for the jQuery version of the Gift Aid calculator\n * {@link https://github.com/cjbarnes/gift-aid-calculator}.\n * @author cJ barnes mail@cjbarnes.co.uk\n * @version 1.0.0\n * @license MIT\n */\n(function giftAidCalculator($) {\n  'use strict';\n\n  /**\n   * Convert monetary values (in pence) into properly formatted pounds-and-pence\n   * strings, ready for outputting to the user.\n   * @param {Number} pence Amount to output, in pence. Anything after the\n   *                       decimal point will be discarded.\n   * @return {String} Formatted value (e.g. if pence == 173, return '1.73').\n   */\n  function outputAmount(pence) {\n    pence = parseInt(pence, 10) || 0;\n    return ((pence / 100).toFixed(2));\n  }\n\n  /**\n   * Converts a tax rate percentage in (almost) any format and returns it as a\n   * simple whole number.\n   * @param {Number} taxRate The tax rate to convert.\n   * @return {Number|NaN} A valid tax rate number, or NaN on failure.\n   */\n  function parseTaxRate(taxRate) {\n    /*\n     * If the taxRate is less than 1, assume it's a US-style percentage (i.e. 0.5 = 50%) and multiply by 100.\n     */\n    if (('number' === typeof taxRate) && (0 < taxRate) && (1 > taxRate)) {\n      taxRate = taxRate * 100;\n    }\n\n    /*\n     * Fallback to the basicRate if the taxRate is invalid (i.e. not a\n     * number or > 100%).\n     *\n     * Note: (taxRate == taxRate) is a test for !NaN, since parseInt() returns\n     * NaN when it fails to find an integer.\n     */\n    taxRate = parseInt(taxRate, 10);\n    if ((taxRate == taxRate) && (taxRate > 100)) {\n      taxRate = NaN;\n    }\n\n    return taxRate;\n  }\n\n  /**\n   * Calculate the amounts claimable and total amounts for a gift at the\n   * specified tax rate.\n   * @param {Number} initialGift The gross value of the gift in pounds.\n   * @param {Number} taxRate     The tax band of the giver (as a percentage).\n   * @return {Object} Both initial and calculated values for this gift.\n   */\n  function calculateGiftAid(initialGift, taxRate) {\n    /*\n     * The standard tax rate. Any tax above this threshold that is paid on the\n     * gift is claimed back by the giver, not the charity.\n     */\n    var _basicRate = 20;\n\n    // Other variables used in the calculation.\n    var charityClaimTaxRate,\n        charityClaimAmount,\n        netGiftGiven,\n        netGiftReceived,\n        giverClaimAmount = 0;\n\n    // Validate and prepare the given taxRate. Fallback to basicRate if NaN.\n    taxRate = parseTaxRate(taxRate) || _basicRate;\n\n    /*\n     * Amount of tax the charity can claim back. Is always the basicRate unless\n     * the giver's tax burden does not reach that threshold. (This is future-\n     * proofing for the introduction of lower tax rates than the basic rate.)\n     */\n    charityClaimTaxRate = (taxRate < _basicRate) ? taxRate : _basicRate;\n\n    /*\n     * Convert gift amount into pence for easier (and more accurate) maths. Fall\n     * back to 0 if NaN or less than 1p.\n     */\n    initialGift = parseInt((initialGift * 100), 10) || 0;\n\n    // Calculate what the charity gets.\n    charityClaimAmount = initialGift * charityClaimTaxRate / (100 - charityClaimTaxRate);\n    netGiftReceived = initialGift + charityClaimAmount;\n\n    /*\n     * Calculate amount of tax the giver can claim back. Works out to the\n     * difference between the total tax paid on the gift and the amount claimed\n     * by the charity. Is always 0 unless this is a higher-rate tax payer.\n     */\n    if (charityClaimTaxRate < taxRate) {\n      giverClaimAmount = (netGiftReceived * taxRate / 100) - charityClaimAmount;\n    }\n    netGiftGiven = initialGift - giverClaimAmount;\n\n    // Return an object containing all the amounts involved in this gift.\n    return {\n      // Initial values passed into this function.\n      grossGift:       outputAmount(initialGift),\n      taxRate:         taxRate,\n      // Calculated values.\n      charityClaims:   outputAmount(charityClaimAmount),\n      giverClaims:     outputAmount(giverClaimAmount),\n      netGiftGiven:    outputAmount(netGiftGiven),\n      netGiftReceived: outputAmount(netGiftReceived)\n    };\n  }\n\n  /**\n   * Perform a Gift Aid calculation and output results to the page.\n   * @param {Element} $calc The Gift Aid calculator parent element (as a jQuery\n   *                        object).\n   */\n  function updateGiftAidCalculator($calc) {\n    // Variables.\n    var $giftInput,\n        $taxRateInput,\n        outputs,\n        gift;\n\n    // Make sure the passed-in calculator element is wrapped in a jQuery object.\n    $calc = $($calc);\n\n    // Check the element in `calc` is a Gift Aid calculator.\n    if (!$calc.hasClass('js-giftaid-calculator')) {\n      return;\n    }\n\n    /*\n     * Get the gift/tax amounts chosen by the user. If they don't exist, end\n     * here.\n     */\n    $giftInput = $calc.find('.js-input-gift');\n    $taxRateInput = $calc.find('.js-input-taxrate');\n    if (($giftInput.length) && ($taxRateInput.length)) {\n      // Calculate for this gift.\n      gift = calculateGiftAid($giftInput.val(), $taxRateInput.val());\n    } else {\n      return;\n    }\n\n    /*\n     * Show/hide the Giver Claims part of the calculator in CSS, depending on\n     * whether the giver can claim back tax on the gift.\n     *\n     * The class that toggles display of the Giver Claims part is:\n     *\n     *     `.show-giver-claims`\n     *\n     * and is applied to the main calculator element (`.js-giftaid-calculator`)\n     *\n     * To support IE8, **this must be done before we update the DOM**, because\n     * IE8 doesn't support `element.textContent` and the equivalent\n     * `element.innerText` doesn't update if the element is hidden by CSS (see\n     * {@link http://developer.mozilla.org/en-US/docs/Web/API/Node-21.html}).\n     */\n    if ('0.00' !== gift.giverClaims) {\n      $calc.addClass('show-giver-claims');\n    } else {\n      $calc.removeClass('show-giver-claims');\n    }\n\n    /*\n     * Update the output on the page. To register an element to be updated with\n     * some data from the gift aid calculation, simply:\n     *\n     * 1. Put the element inside the same `.js-giftaid-calculator` element as\n     *    the initialGift and taxRate fields used for the calculation.\n     * 2. Give the element one of the 'js-' classes listed below.\n     *\n     * Note that the property names of this object exactly match the property\n     * names of the gift object (returned by `calculateGiftAid()`), which makes\n     * looping through these objects easier.\n     */\n    outputs = {\n      grossGift      : $calc.find('.js-output-gross-gift'),\n      taxRate        : $calc.find('.js-output-taxrate'),\n      charityClaims  : $calc.find('.js-output-charity-claims'),\n      giverClaims    : $calc.find('.js-output-giver-claims'),\n      netGiftGiven   : $calc.find('.js-output-net-gift-given'),\n      netGiftReceived: $calc.find('.js-output-net-gift-received')\n    };\n\n    // Loop through the list-of-collections to update each node's contents.\n    $.each(outputs, function (field, $elements) {\n      /*\n       * * Change the contents of all DOM elements in this jQuery collection to\n       * = the matching gift-calculation value.\n       */\n      $elements.text(gift[field]);\n    });\n\n  }\n\n  /**\n   * Wrap the update function in a closure, so it can be used in an event\n   * listener without losing the reference to the current Gift Aid calculator.\n   * @param {Element} $calc The Gift Aid calculator parent element (as a jQuery\n   *                        object).\n   * @return {Function} Event handler that calls `updateGiftAidCalculator()`.\n   */\n  function updateGiftAidDelegate($calc) {\n    return function () {\n      updateGiftAidCalculator($calc);\n    };\n  }\n\n  /**\n   * Quick event listener to prevent form submission (since we are handling all\n   * form processing in JavaScript).\n   * @this target\n   * @param {Event} e Event object.\n   */\n  function cancelGiftAidFormSubmission(e) {\n    e.preventDefault();\n  }\n\n  /**\n   * On DOM ready, hook up the events that make the Gift Aid calculator work,\n   * and set initial values and styling.\n   */\n  $(function initGiftAidCalculator() {\n    var $calculators = $('.js-giftaid-calculator');\n\n    // End here if there aren't any Gift Aid calculators on the page.\n    if (!$calculators.length) {\n      return false;\n    }\n\n    /**\n     * For each Gift Aid calculator on this page, replace the initial `.no-js`\n     * class with `.js` to flag that JavaScript is on.\n     */\n    $calculators\n      .addClass('js')\n      .removeClass('no-js');\n\n    /*\n     * Initialize events and first calculation for each Gift Aid calculator in\n     * turn.\n     */\n    $calculators.each(function () {\n      var $giftInput,\n          $taxRateInput,\n          $calc = $(this);\n\n      // Run the Gift Aid calculation for the first time, updating all fields.\n      updateGiftAidCalculator($calc);\n\n      // Prevent form submission.\n      $calc.submit(cancelGiftAidFormSubmission);\n\n      /*\n       * Attach recalculation-triggering events. Don't bother if this Gift Aid\n       * calculator is missing one or both of its inputs.\n       *\n       * Note that we call the intermediary function `updateGiftAidDelegate()`\n       * here to wrap the event listeners in a closure, so the current `calc`\n       * element can be passed to `updateGiftAidCalculator()`. See this\n       * StackOverflow answer: {@link http://stackoverflow.com/a/19586251}.\n       */\n      $giftInput = $('.js-input-gift');\n      $taxRateInput = $('.js-input-taxrate');\n      if ($giftInput.length && $taxRateInput.length) {\n        $giftInput.on('keyup, change', updateGiftAidDelegate($calc));\n        $taxRateInput.change(updateGiftAidDelegate($calc));\n      }\n\n    });\n\n  });\n\n})(jQuery);\n"],"sourceRoot":"/source/"}