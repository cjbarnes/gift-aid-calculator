{"version":3,"sources":["gift-aid-calculator.js"],"names":["outputAmount","pence","parseInt","toFixed","parseTaxRate","taxRate","NaN","calculateGiftAid","initialGift","charityClaimTaxRate","charityClaimAmount","netGiftGiven","netGiftReceived","basicRate","giverClaimAmount","grossGift","charityClaims","giverClaims","updateGiftAidCalculator","calc","giftInput","taxRateInput","outputs","gift","i","l","classRegex","className","test","querySelector","value","classList","add","remove","replace","querySelectorAll","field","length","undefined","textContent","innerText","updateGiftAidDelegate","addEventListener","target","type","listener","attachEvent","e","srcElement","currentTarget","preventDefault","this","returnValue","call","cancelGiftAidFormSubmission","initGiftAidCalculator","calculators","document","re","readyState"],"mappings":"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","file":"gift-aid-calculator.min.js","sourcesContent":["/**\n * All JavaScript for the Gift Aid calculator\n * {@link https://github.com/cjbarnes/gift-aid-calculator}.\n * @author cJ barnes mail@cjbarnes.co.uk\n * @version 1.0.0\n * @license MIT\n */\n(function giftAidCalculator() {\n  'use strict';\n\n  /**\n   * Convert monetary values (in pence) into properly formatted pounds-and-pence\n   * strings, ready for outputting to the user.\n   * @param {Number} pence Amount to output, in pence. Anything after the\n   *                       decimal point will be discarded.\n   * @return {String} Formatted value (e.g. if pence == 173, return '1.73').\n   */\n  function outputAmount(pence) {\n    pence = parseInt(pence, 10) || 0;\n    return ((pence / 100).toFixed(2));\n  }\n\n  /**\n   * Converts a tax rate percentage in (almost) any format and returns it as a\n   * simple whole number.\n   * @param {Number} taxRate The tax rate to convert.\n   * @return {Number|NaN} A valid tax rate number, or NaN on failure.\n   */\n  function parseTaxRate(taxRate) {\n    /*\n     * If the taxRate is less than 1, assume it's a US-style percentage (i.e. 0.5 = 50%) and multiply by 100.\n     */\n    if (('number' === typeof taxRate) && (0 < taxRate) && (1 > taxRate)) {\n      taxRate = taxRate * 100;\n    }\n\n    /*\n     * Fallback to the basicRate if the taxRate is invalid (i.e. not a\n     * number or > 100%).\n     *\n     * Note: (taxRate == taxRate) is a test for !NaN, since parseInt() returns\n     * NaN when it fails to find an integer.\n     */\n    taxRate = parseInt(taxRate, 10);\n    if ((taxRate == taxRate) && (taxRate > 100)) {\n      taxRate = NaN;\n    }\n\n    return taxRate;\n  }\n\n  /**\n   * Calculate the amounts claimable and total amounts for a gift at the\n   * specified tax rate.\n   * @param {Number} initialGift The gross value of the gift in pounds.\n   * @param {Number} taxRate     The tax band of the giver (as a percentage).\n   * @return {Object} Both initial and calculated values for this gift.\n   */\n  function calculateGiftAid(initialGift, taxRate) {\n    /*\n     * The standard tax rate. Any tax above this threshold that is paid on the\n     * gift is claimed back by the giver, not the charity.\n     */\n    var basicRate = 20;\n\n    // Other variables used in the calculation.\n    var charityClaimTaxRate,\n        charityClaimAmount,\n        netGiftGiven,\n        netGiftReceived,\n        giverClaimAmount = 0;\n\n    // Validate and prepare the given taxRate. Fallback to basicRate if NaN.\n    taxRate = parseTaxRate(taxRate) || basicRate;\n\n    /*\n     * Amount of tax the charity can claim back. Is always the basicRate unless\n     * the giver's tax burden does not reach that threshold. (This is future-\n     * proofing for the introduction of lower tax rates than the basic rate.)\n     */\n    charityClaimTaxRate = (taxRate < basicRate) ? taxRate : basicRate;\n\n    /*\n     * Convert gift amount into pence for easier (and more accurate) maths. Fall\n     * back to 0 if NaN or less than 1p.\n     */\n    initialGift = parseInt((initialGift * 100), 10) || 0;\n\n    // Calculate what the charity gets.\n    charityClaimAmount = initialGift * charityClaimTaxRate / (100 - charityClaimTaxRate);\n    netGiftReceived = initialGift + charityClaimAmount;\n\n    /*\n     * Calculate amount of tax the giver can claim back. Works out to the\n     * difference between the total tax paid on the gift and the amount claimed\n     * by the charity. Is always 0 unless this is a higher-rate tax payer.\n     */\n    if (charityClaimTaxRate < taxRate) {\n      giverClaimAmount = (netGiftReceived * taxRate / 100) - charityClaimAmount;\n    }\n    netGiftGiven = initialGift - giverClaimAmount;\n\n    // Return an object containing all the amounts involved in this gift.\n    return {\n      // Initial values passed into this function.\n      grossGift:       outputAmount(initialGift),\n      taxRate:         taxRate,\n      // Calculated values.\n      charityClaims:   outputAmount(charityClaimAmount),\n      giverClaims:     outputAmount(giverClaimAmount),\n      netGiftGiven:    outputAmount(netGiftGiven),\n      netGiftReceived: outputAmount(netGiftReceived)\n    };\n  }\n\n  /**\n   * Perform a Gift Aid calculation and output results to the page.\n   * @param {Element} calc The Gift Aid calculator parent element.\n   */\n  function updateGiftAidCalculator(calc) {\n    // DOM element variables.\n    var giftInput,\n        taxRateInput,\n        outputs;\n\n    // Other variables.\n    var gift,\n        i,\n        l,\n        classRegex = /(^| )show-giver-claims( |$)/;\n\n    // Check the element in `calc` is a Gift Aid calculator.\n    if (!calc.className || !(/(^| )js-giftaid-calculator( |$)/.test(calc.className))) {\n      return;\n    }\n\n    /*\n     * Get the gift/tax amounts chosen by the user. If they don't exist, end\n     * here.\n     */\n    giftInput = calc.querySelector('.js-input-gift');\n    taxRateInput = calc.querySelector('.js-input-taxrate');\n    if ((null !== giftInput) && (null !== taxRateInput)) {\n      // Calculate for this gift.\n      gift = calculateGiftAid(giftInput.value, taxRateInput.value);\n    } else {\n      return;\n    }\n\n    /*\n     * Show/hide the Giver Claims part of the calculator in CSS, depending on\n     * whether the giver can claim back tax on the gift.\n     *\n     * The class that toggles display of the Giver Claims part is:\n     *\n     *     `.show-giver-claims`\n     *\n     * and is applied to the main calculator element (`.js-giftaid-calculator`)\n     *\n     * To support IE8, **this must be done before we update the DOM**, because\n     * IE8 doesn't support `element.textContent` and the equivalent\n     * `element.innerText` doesn't update if the element is hidden by CSS (see\n     * {@link http://developer.mozilla.org/en-US/docs/Web/API/Node-21.html}).\n     */\n    if (calc.classList) {\n      if ('0.00' !== gift.giverClaims) {\n        calc.classList.add('show-giver-claims');\n      } else {\n        calc.classList.remove('show-giver-claims');\n      }\n    } else {\n      // Fallback for browsers that don't support classList.\n      if (('0.00' !== gift.giverClaims) && !classRegex.test(calc.className)) {\n        calc.className += ' show-giver-claims';\n      } else if (('0.00' === gift.giverClaims) && classRegex.test(calc.className)) {\n        calc.className = calc.className.replace(classRegex, ' ');\n      }\n    }\n\n    /*\n     * Update the output on the page. To register an element to be updated with\n     * some data from the gift aid calculation, simply:\n     *\n     * 1. Put the element inside the same `.js-giftaid-calculator` element as\n     *    the initialGift and taxRate fields used for the calculation.\n     * 2. Give the element one of the 'js-' classes listed below.\n     *\n     * Note that the property names of this object exactly match the property\n     * names of the gift object (returned by `calculateGiftAid()`), which makes\n     * looping through these objects easier.\n     */\n    outputs = {\n      grossGift      : calc.querySelectorAll('.js-output-gross-gift'),\n      taxRate        : calc.querySelectorAll('.js-output-taxrate'),\n      charityClaims  : calc.querySelectorAll('.js-output-charity-claims'),\n      giverClaims    : calc.querySelectorAll('.js-output-giver-claims'),\n      netGiftGiven   : calc.querySelectorAll('.js-output-net-gift-given'),\n      netGiftReceived: calc.querySelectorAll('.js-output-net-gift-received')\n    };\n\n    // Loop through the list-of-NodeLists to update each node's contents.\n    for (var field in outputs) {\n      /*\n       * Loop through the individual DOM elements in this NodeList and change\n       * their contents to = the matching gift-calculation value.\n       */\n      for (i = 0, l = outputs[field].length; i < l; i++) {\n        // Equivalent of jQuery's `$(element).text('string')`.\n        if (undefined !== outputs[field][i].textContent) {\n          outputs[field][i].textContent = gift[field];\n        } else {\n          outputs[field][i].innerText = gift[field];\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Wrap the update function in a closure, so it can be used in an event\n   * listener without losing the reference to the current Gift Aid calculator.\n   * @param {Element} calc The Gift Aid calculator parent element.\n   * @return {Function} Event handler that calls `updateGiftAidCalculator()`.\n   */\n  function updateGiftAidDelegate(calc) {\n    return function () {\n      updateGiftAidCalculator(calc);\n    };\n  }\n\n  /**\n   * Hook into a DOM element event, abstracting around IE8's lack of support\n   * for `addEventListener()`.\n   * @param {Node}     target   The element that should listen for this event.\n   * @param {String}   type     The name of the event type to listen for.\n   * @param {Function} listener The function to call when this event occurs.\n   */\n  function addEventListener(target, type, listener) {\n    if (target.addEventListener) {\n      target.addEventListener(type, listener);\n    } else {\n      target.attachEvent('on' + type, function(e) {\n        // Prepare the Event object to better match `addEventListener`.\n        e.target = e.srcElement;\n        e.currentTarget = target;\n        e.preventDefault = function() {\n          this.returnValue = false;\n        };\n        // Call the event listener with `this` and Event object set.\n        listener.call(target, e);\n      });\n    }\n  }\n\n  /**\n   * Quick event listener to prevent form submission (since we are handling all\n   * form processing in JavaScript).\n   * @this target\n   * @param {Event} e Event object.\n   */\n  function cancelGiftAidFormSubmission(e) {\n    e.preventDefault();\n  }\n\n  /**\n   * On DOM ready, hook up the events that make the Gift Aid calculator work,\n   * and set initial values and styling.\n   */\n  function initGiftAidCalculator() {\n    var i,\n        l,\n        calc,\n        giftInput,\n        taxRateInput,\n        calculators = document.querySelectorAll('.js-giftaid-calculator');\n\n    // End here if there aren't any Gift Aid calculators on the page.\n    if (!calculators.length) {\n      return false;\n    }\n\n    /**\n     * For each Gift Aid calculator on this page, replace the initial `.no-js`\n     * class with `.js` to flag that JavaScript is on.\n     */\n    (function setJSFlag() {\n      var re = /(^| )no-js( |$)/;\n      for (i = 0, l = calculators.length; i < l; i++) {\n        if (calculators[i].classList) {\n          calculators[i].classList.add('js');\n          calculators[i].classList.remove('no-js');\n        } else {\n          // Fallback for browsers that don't support classList.\n          calculators[i].className = calculators[i].className.replace(re, ' js ');\n        }\n      }\n    })();\n\n    /*\n     * Initialize events and first calculation for each Gift Aid calculator in\n     * turn.\n     */\n    for (i = 0, l = calculators.length; i < l; i++) {\n      calc = calculators[i];\n\n      // Run the Gift Aid calculation for the first time, updating all fields.\n      updateGiftAidCalculator(calc);\n\n      // Prevent form submission.\n      addEventListener(calc, 'submit', cancelGiftAidFormSubmission);\n\n      /*\n       * Attach recalculation-triggering events. Don't bother if this Gift Aid\n       * calculator is missing one or both of its inputs.\n       *\n       * Note that we call the intermediary function `updateGiftAidDelegate()`\n       * here to wrap the event listeners in a closure, so the current `calc`\n       * element can be passed to `updateGiftAidCalculator()`. See this\n       * StackOverflow answer: {@link http://stackoverflow.com/a/19586251}.\n       */\n      giftInput = calc.querySelector('.js-input-gift');\n      taxRateInput = calc.querySelector('.js-input-taxrate');\n      if ((null !== giftInput) && (null !== taxRateInput)) {\n        addEventListener(giftInput, 'keyup', updateGiftAidDelegate(calc));\n        addEventListener(giftInput, 'change', updateGiftAidDelegate(calc));\n        addEventListener(taxRateInput, 'change', updateGiftAidDelegate(calc));\n      }\n\n    }\n\n  }\n\n  /*\n   * Initialize on DOM ready. All of this block is the equivalent of jQuery's\n   * `$(document).ready(initGiftAidCalculator)`.\n   */\n  if ('loading' !== document.readyState) {\n    initGiftAidCalculator();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', initGiftAidCalculator);\n  } else {\n    document.attachEvent('onreadystatechange', function () {\n      if ('loading' !== document.readyState) {\n        initGiftAidCalculator();\n      }\n    });\n  }\n\n})();\n"],"sourceRoot":"/source/"}